# -*- coding: utf-8 -*-
"""Sentiment_Stockprice_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ib89mSs1p4-XnTVWUDeU_rnm7QDO2wyl

Install and Importing necessary libraries:
"""

!pip install pystan==2.19.1.1
!pip install requests
!pip install textblob
!pip install fbprophet
!pip install feedparser
!pip install vaderSentiment

import pandas as pd
import yfinance as yf
import feedparser
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from fbprophet import Prophet

"""Retrieving news articles from News API:"""

import requests

url = 'https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=e34da7bd93a44269a032f180ce871c85'
response = requests.get(url)
data = response.json()

for article in data['articles']:
    headline = article['title']
    description = article['description']
    source = article['source']['name']
    # do something with the article information

"""Performing sentiment analysis on news articles:"""

import requests
from textblob import TextBlob
import pandas as pd

company_list = ['apple', 'OpenAI','Sensetime','equnix']
sentiments = []

for company in company_list:
    url = f"https://newsapi.org/v2/everything?q={company}&apiKey=e34da7bd93a44269a032f180ce871c85"
    response = requests.get(url)
    news = response.json()['articles']
    for article in news:
        title = article['title']
        description = article['description']
        content = article['content']
        blob = TextBlob(content)
        sentiment = blob.sentiment.polarity
        sentiments.append([company, title, description, content, sentiment])

df = pd.DataFrame(sentiments, columns=['Company', 'Title', 'Description', 'Content', 'Sentiment'])

import requests
from textblob import TextBlob
import pandas as pd
import yfinance as yf
from fbprophet import Prophet

# Define the list of companies to analyze
company_list = ['apple', 'OpenAI','Sensetime','equnix']
sentiments = []

# Scrape news articles and calculate sentiment for each company
for company in company_list:
    url = f"https://newsapi.org/v2/everything?q={company}&apiKey=e34da7bd93a44269a032f180ce871c85"
    response = requests.get(url)
    news = response.json()['articles']
    for article in news:
        title = article['title']
        description = article['description']
        content = article['content']
        blob = TextBlob(content)
        sentiment = blob.sentiment.polarity
        sentiments.append([company, title, description, content, sentiment])

# Convert the sentiments list into a dataframe
df = pd.DataFrame(sentiments, columns=['Company', 'Title', 'Description', 'Content', 'Sentiment'])

# Download stock data for Microsoft
msft = yf.download('AAPL', start='2016-01-01', end='2023-04-21')
msft.reset_index(inplace=True)
msft = msft[['Date', 'Close']]
msft = msft.rename(columns={'Date': 'ds', 'Close': 'y'})

# Create a Prophet model and fit it to the Microsoft data
model = Prophet()
model.fit(msft)

# Make predictions for the next 30 days
future = model.make_future_dataframe(periods=30)
forecast = model.predict(future)

# Plot the predicted stock price
fig, ax = plt.subplots(figsize=(12, 6))
model.plot(forecast, ax=ax)
plt.title('Apple Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.show()

# Show the last 5 rows of the predicted stock price
forecast_table = forecast[['ds', 'yhat']].tail()
forecast_table = forecast_table.rename(columns={'ds': 'Date', 'yhat': 'Predicted Price'})
print(forecast_table)

import requests
from textblob import TextBlob
import pandas as pd
import yfinance as yf
from fbprophet import Prophet
import seaborn as sns

company_list = ['apple', 'OpenAI','Sensetime','equnix']
sentiments = []

for company in company_list:
    url = f"https://newsapi.org/v2/everything?q={company}&apiKey=e34da7bd93a44269a032f180ce871c85"
    response = requests.get(url)
    news = response.json()['articles']
    for article in news:
        title = article['title']
        description = article['description']
        content = article['content']
        blob = TextBlob(content)
        sentiment = blob.sentiment.polarity
        sentiments.append([company, title, description, content, sentiment])

df = pd.DataFrame(sentiments, columns=['Company', 'Title', 'Description', 'Content', 'Sentiment'])

start_date = '2016-01-01'
end_date = '2023-04-21'

sensetime = yf.download('AAPL', start=start_date, end=end_date)
sensetime.reset_index(inplace=True)
sensetime = sensetime[['Date', 'Close']]
sensetime = sensetime.rename(columns={'Date': 'ds', 'Close': 'y'})
model = Prophet()
model.fit(sensetime)

future = model.make_future_dataframe(periods=30)
forecast = model.predict(future)

# Create a table of stock prices
prices = forecast[['ds', 'yhat']].tail(30)
prices = prices.set_index('ds')
prices.index.name = 'Date'
prices = prices.rename(columns={'yhat': 'Stock Price'})

# Create a heatmap of key words
df['KeyWords'] = df['Title'].str.findall(r'\b\w{5,}\b')
keywords = pd.Series([word for words in df['KeyWords'] for word in words]).value_counts().nlargest(20)
top_keywords = pd.DataFrame({'Keyword': keywords.index, 'Frequency': keywords.values})
pivot_df = pd.pivot_table(df, values='Sentiment', columns='Company', index=df['Title'].str[:30], aggfunc='mean')
top_pivot_df = pivot_df.nlargest(20, 'apple')
plt.figure(figsize=(12, 8))
sns.heatmap(top_pivot_df, annot=True, cmap='coolwarm')

# Display the table and heatmap
print(prices)
plt.show()